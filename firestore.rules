rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      let userProfile = get(/databases/$(database)/documents/userProfiles/$(request.auth.uid));
      return userProfile != null ? userProfile.data.role : 'user';
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    function isStaff() {
      return isAuthenticated() && 
        (getUserRole() == 'staff' || getUserRole() == 'admin');
    }

    function isResourceOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // UserProfile rules
    match /userProfiles/{userId} {
      allow read: if isAuthenticated() && (isResourceOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isResourceOwner(userId);
      allow update: if isAuthenticated() && (isResourceOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Room rules
    match /rooms/{roomId} {
      allow read: if true;
      allow list: if true;  // Allow querying rooms
      allow create: if isAdmin();
      allow update: if isAuthenticated() && (
        isStaff() || 
        // Allow room status update during booking process
        (resource.data.status == 'available' && 
         request.resource.data.status in ['occupied', 'pending']) ||
        // Allow room status update during payment process
        (resource.data.status == 'pending' && 
         request.resource.data.status in ['occupied', 'available', 'cleaning', 'maintenance']) ||
        // Allow room status update during cancellation
        (resource.data.status in ['occupied', 'pending'] && 
         request.resource.data.status == 'available' &&
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['status', 'lastUpdated', 'updatedBy'])) ||
        // Allow status updates by staff
        (isStaff() && 
         request.resource.data.status in ['available', 'occupied', 'cleaning', 'maintenance', 'do-not-disturb'])
      );
      allow delete: if isAdmin();
    }

    // Booking rules
    match /bookings/{bookingId} {
      allow read: if true;  // Allow reading bookings for availability checks
      allow list: if true;  // Allow querying bookings for availability checks
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        // Allow staff to manage all bookings
        isStaff() ||
        // Allow users to cancel their own bookings
        (isResourceOwner(resource.data.userId) && 
         request.resource.data.status == 'cancelled' &&
         resource.data.status in ['pending', 'confirmed'] &&
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['status', 'updatedAt', 'cancelledAt', 'cancelledBy'])) ||
        // Allow payment status updates
        (resource.data.userId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['paymentStatus', 'status', 'updatedAt', 'paymentId', 'receiptUrl']))
      );
      allow delete: if isAuthenticated() && (
        (isResourceOwner(resource.data.userId) && resource.data.status == 'pending') ||
        isStaff()
      );
    }

    // Payment rules
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        isResourceOwner(resource.data.userId) || 
        isStaff()
      );
      allow create: if isAuthenticated() && (
        // Ensure payment has required fields and userId matches
        request.resource.data.keys().hasAll(['userId', 'amount', 'status']) &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.status == 'pending'
      );
      allow update: if isAuthenticated() && (
        // Allow payment owner to update status and payment intent
        (isResourceOwner(resource.data.userId) && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['status', 'updatedAt', 'stripePaymentIntentId', 'refundId', 'refundStatus'])) ||
        // Allow staff to manage payments
        isStaff()
      );
      allow delete: if false;  // Never allow payment deletion
    }

    // Service request rules
    match /serviceRequests/{requestId} {
      allow read: if isAuthenticated() && (
        isResourceOwner(resource.data.userId) || 
        isStaff()
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        isResourceOwner(resource.data.userId) || 
        isStaff()
      );
      allow delete: if isAdmin();
    }

    // Notification rules
    match /notifications/{notificationId} {
  allow read: if isAuthenticated() && (
    resource.data.userId == request.auth.uid || isStaff()
  );
  allow create: if isAuthenticated() && (
    isStaff() || request.resource.data.userId == request.auth.uid
  );
  allow update: if isAuthenticated() && (
    (resource.data.userId == request.auth.uid && 
     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'updatedAt'])) || 
    isStaff()
  );
  allow delete: if isStaff();
}
  }
} 